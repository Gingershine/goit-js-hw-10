{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst datetimePicker = document.querySelector('#datetime-picker');\nconst startBtn = document.querySelector('[data-start]');\nconst daysEl = document.querySelector('[data-days]');\nconst hoursEl = document.querySelector('[data-hours]');\nconst minutesEl = document.querySelector('[data-minutes]');\nconst secondsEl = document.querySelector('[data-seconds]');\n\nlet userSelectedDate = 0;\n\nstartBtn.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n    const currentDate = new Date();\n    if (userSelectedDate <= currentDate) {\n\n      iziToast.error({\n    title: '❌',\n        message: \"Please choose a date in the future\",\n    position: 'topRight',\n      })      \n    } else {\n      startBtn.disabled = false;\n      }    \n  },\n};\n\nflatpickr(datetimePicker, options);\n\nstartBtn.addEventListener('click', handleTimer); \n\nfunction handleTimer() {\n  const intervalId = setInterval(() => {\n    const timeDiff = userSelectedDate - Date.now();\n    const time = convertMs(timeDiff);\n\n    if (timeDiff < 0) {\n      clearInterval(intervalId);\n      console.log('clear'); \n    } else {\n      daysEl.textContent = addLeadingZero(time.days);\n      hoursEl.textContent = addLeadingZero(time.hours);\n      minutesEl.textContent = addLeadingZero(time.minutes);\n      secondsEl.textContent = addLeadingZero(time.seconds);\n    }    \n  }, 1000)\n  startBtn.disabled = true;  \n}\n\nfunction addLeadingZero(value) {\n  return value.toString().padStart(2, '0');\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\n"],"names":["datetimePicker","startBtn","daysEl","hoursEl","minutesEl","secondsEl","userSelectedDate","options","selectedDates","currentDate","iziToast","flatpickr","handleTimer","intervalId","timeDiff","time","convertMs","addLeadingZero","value","ms","days","hours","minutes","seconds"],"mappings":"+IAKA,MAAMA,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAS,SAAS,cAAc,aAAa,EAC7CC,EAAU,SAAS,cAAc,cAAc,EAC/CC,EAAY,SAAS,cAAc,gBAAgB,EACnDC,EAAY,SAAS,cAAc,gBAAgB,EAEzD,IAAIC,EAAmB,EAEvBL,EAAS,SAAW,GAEpB,MAAMM,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBF,EAAmBE,EAAc,GACjC,MAAMC,EAAc,IAAI,KACpBH,GAAoBG,EAEtBC,EAAS,MAAM,CACjB,MAAO,IACH,QAAS,qCACb,SAAU,UACd,CAAO,EAEDT,EAAS,SAAW,EAEvB,CACH,EAEAU,EAAUX,EAAgBO,CAAO,EAEjCN,EAAS,iBAAiB,QAASW,CAAW,EAE9C,SAASA,GAAc,CACrB,MAAMC,EAAa,YAAY,IAAM,CACnC,MAAMC,EAAWR,EAAmB,KAAK,IAAG,EACtCS,EAAOC,EAAUF,CAAQ,EAE3BA,EAAW,GACb,cAAcD,CAAU,EACxB,QAAQ,IAAI,OAAO,IAEnBX,EAAO,YAAce,EAAeF,EAAK,IAAI,EAC7CZ,EAAQ,YAAcc,EAAeF,EAAK,KAAK,EAC/CX,EAAU,YAAca,EAAeF,EAAK,OAAO,EACnDV,EAAU,YAAcY,EAAeF,EAAK,OAAO,EAEtD,EAAE,GAAI,EACPd,EAAS,SAAW,EACtB,CAEA,SAASgB,EAAeC,EAAO,CAC7B,OAAOA,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,CACzC,CAEA,SAASF,EAAUG,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}